import React, { createContext, useContext, useState, useEffect } from 'react';
import { toast } from 'sonner';
import { 
  User, 
  AuthContextType, 
  SignUpData,
  LoginFormValues,
  VerifyOTPValues
} from './types';
import { 
  getUserFromStorage, 
  saveUserToStorage, 
  removeUserFromStorage,
  findUserByCredentials,
  createUserWithoutPassword,
  checkIfEmailExists,
  generatePassword,
  handleEmployeeAccounts
} from './authUtils';

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [needsVerification, setNeedsVerification] = useState<boolean>(false);
  const [pendingVerificationEmail, setPendingVerificationEmail] = useState<string | null>(null);

  // Check for existing session on mount
  useEffect(() => {
    const checkAuth = () => {
      const storedUser = getUserFromStorage();
      if (storedUser) {
        // If the user is not verified, set verification states
        if (storedUser.verified === false) {
          setNeedsVerification(true);
          setPendingVerificationEmail(storedUser.email);
        } else {
          setUser(storedUser);
        }
      }
      setIsLoading(false);
    };

    checkAuth();
  }, []);

  const login = async (formData: LoginFormValues) => {
    const { email, password } = formData;
    setIsLoading(true);
    
    try {
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const foundUser = findUserByCredentials(email, password);
      
      if (foundUser) {
        const userWithoutPassword = createUserWithoutPassword(foundUser);
        
        // Check if user needs verification
        if (userWithoutPassword.verified === false) {
          setNeedsVerification(true);
          setPendingVerificationEmail(email);
          
          // Store unverified user in storage with verification flag
          saveUserToStorage({
            ...userWithoutPassword,
            verified: false
          });
          
          toast.info('Please verify your email to continue');
          return;
        }
        
        // User is verified, proceed with login
        setUser(userWithoutPassword);
        saveUserToStorage(userWithoutPassword);
        toast.success('Welcome back!');
      } else {
        throw new Error('Invalid email or password');
      }
    } catch (error) {
      if (error instanceof Error) {
        toast.error(error.message);
      } else {
        toast.error('Failed to login');
      }
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const signUp = async (userData: SignUpData) => {
    setIsLoading(true);
    
    try {
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Check if email already exists
      if (checkIfEmailExists(userData.email)) {
        throw new Error('Email already in use');
      }

      // Generate a random password (in a real app, this would be done server-side)
      const generatedPassword = generatePassword();
      
      // In a real app, you would send an email with the generated password here
      console.log(`Generated password for ${userData.email}: ${generatedPassword}`);
      
      // Create new user (in a real app, this would be handled by the backend)
      const newUserId = `3`; // This would be generated by the backend
      const newUser: User = {
        id: newUserId,
        email: userData.email,
        name: userData.name,
        role: 'manager', // Set the main account as a manager role
        agency: userData.agency,
        country: userData.country,
        phone: userData.phone,
        balance: 0,
        verified: false // User starts as unverified
      };

      // Handle employee accounts if they exist
      handleEmployeeAccounts(userData.employees);

      // Set verification states
      setNeedsVerification(true);
      setPendingVerificationEmail(userData.email);
      
      // In a real app, user data wouldn't be stored locally until after verification
      // But for demo purposes, we'll store it with the verified flag set to false
      saveUserToStorage(newUser);
      
      // Show a message about the OTP
      toast.success('Account created! Check your email for the verification code.');
    } catch (error) {
      if (error instanceof Error) {
        toast.error(error.message);
      } else {
        toast.error('Failed to create account');
      }
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const verifyOTP = async (otp: string): Promise<void> => {
    setIsLoading(true);
    
    try {
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // For demo purposes, accept any 6-digit OTP
      if (otp.length !== 6 || !/^\d+$/.test(otp)) {
        throw new Error('Invalid OTP format. Please enter 6 digits.');
      }

      // Get the unverified user from storage
      const storedUser = getUserFromStorage();
      if (!storedUser) {
        throw new Error('No pending verification found');
      }
      
      // Update user's verification status
      const verifiedUser: User = {
        ...storedUser,
        verified: true
      };
      
      // Update states
      setUser(verifiedUser);
      setNeedsVerification(false);
      setPendingVerificationEmail(null);
      
      // Update storage
      saveUserToStorage(verifiedUser);
      
      // In a real app, you would notify the backend about successful verification
      console.log(`User ${storedUser.email} verified successfully with OTP: ${otp}`);
    } catch (error) {
      if (error instanceof Error) {
        toast.error(error.message);
      } else {
        toast.error('Failed to verify OTP');
      }
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    setNeedsVerification(false);
    setPendingVerificationEmail(null);
    removeUserFromStorage();
    toast.info('You have been logged out');
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated: !!user && !!user.verified,
        isLoading,
        needsVerification,
        pendingVerificationEmail,
        login,
        signUp,
        verifyOTP,
        logout
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuthContext = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuthContext must be used within an AuthProvider');
  }
  return context;
};
