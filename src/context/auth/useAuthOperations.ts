import { useState } from 'react';
import { toast } from 'sonner';
import { 
  User, 
  LoginFormValues,
  SignUpData
} from './types';
import { 
  getUserFromStorage, 
  saveUserToStorage, 
  removeUserFromStorage,
  findUserByCredentials,
  createUserWithoutPassword,
  checkIfEmailExists,
  generatePassword,
  handleEmployeeAccounts
} from './authUtils';

export interface AuthState {
  user: User | null;
  isLoading: boolean;
  needsVerification: boolean;
  pendingVerificationEmail: string | null;
}

export interface AuthOperations {
  login: (formData: LoginFormValues) => Promise<void>;
  signUp: (userData: SignUpData) => Promise<void>;
  verifyOTP: (otp: string) => Promise<void>;
  logout: () => void;
}

export const useAuthOperations = (
  authState: AuthState,
  setAuthState: React.Dispatch<React.SetStateAction<AuthState>>
): AuthOperations => {
  
  const login = async (formData: LoginFormValues) => {
    const { email, password } = formData;
    setAuthState(prev => ({ ...prev, isLoading: true }));
    
    try {
      // Call the login API endpoint
      const response = await fetch('http://127.0.0.1:8000/api/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Invalid email or password');
      }
      
      const userData = await response.json();
      
      // Transform API response to user object
      const user: User = {
        id: userData.id || userData.user_id || String(userData.user_id),
        name: userData.name || userData.travel_agent_office || '',
        email: userData.email || email,
        role: userData.role || 'agent',
        agency: userData.agency || userData.user_name || '',
        country: userData.country || userData.pos || '',
        phone: userData.phone || '',
        balance: userData.balance || 0,
        verified: true // User is verified since they logged in successfully
      };
      
      // Update auth state with user data
      setAuthState(prev => ({ ...prev, user }));
      
      // Save user data to storage
      saveUserToStorage(user);
      
      // Show success message
      toast.success('Welcome back!');
      
    } catch (error) {
      if (error instanceof Error) {
        toast.error(error.message);
      } else {
        toast.error('Failed to login');
      }
      throw error;
    } finally {
      setAuthState(prev => ({ ...prev, isLoading: false }));
    }
  };

  const signUp = async (userData: SignUpData) => {
    setAuthState(prev => ({ ...prev, isLoading: true }));
    
    try {
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Check if email already exists
      if (checkIfEmailExists(userData.email)) {
        throw new Error('Email already in use');
      }

      // Generate a random password (in a real app, this would be done server-side)
      const generatedPassword = generatePassword();
      
      // In a real app, you would send an email with the generated password here
      console.log(`Generated password for ${userData.email}: ${generatedPassword}`);
      
      // Create new user (in a real app, this would be handled by the backend)
      const newUserId = `3`; // This would be generated by the backend
      const newUser: User = {
        id: newUserId,
        email: userData.email,
        name: userData.name,
        role: 'manager', // Set the main account as a manager role
        agency: userData.agency,
        country: userData.country,
        phone: userData.phone,
        balance: 0,
        verified: false // User starts as unverified
      };

      // Handle employee accounts if they exist
      handleEmployeeAccounts(userData.employees);

      // Set verification states
      setAuthState(prev => ({
        ...prev,
        needsVerification: true,
        pendingVerificationEmail: userData.email
      }));
      
      // In a real app, user data wouldn't be stored locally until after verification
      // But for demo purposes, we'll store it with the verified flag set to false
      saveUserToStorage(newUser);
      
      // Show a message about the OTP
      toast.success('Account created! Check your email for the verification code.');
    } catch (error) {
      if (error instanceof Error) {
        toast.error(error.message);
      } else {
        toast.error('Failed to create account');
      }
      throw error;
    } finally {
      setAuthState(prev => ({ ...prev, isLoading: false }));
    }
  };

  const verifyOTP = async (otp: string): Promise<void> => {
    setAuthState(prev => ({ ...prev, isLoading: true }));
    
    try {
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // For demo purposes, accept any 6-digit OTP
      if (otp.length !== 6 || !/^\d+$/.test(otp)) {
        throw new Error('Invalid OTP format. Please enter 6 digits.');
      }

      // Get the unverified user from storage
      const storedUser = getUserFromStorage();
      if (!storedUser) {
        throw new Error('No pending verification found');
      }
      
      // Update user's verification status
      const verifiedUser: User = {
        ...storedUser,
        verified: true
      };
      
      // Update states
      setAuthState(prev => ({
        ...prev,
        user: verifiedUser,
        needsVerification: false,
        pendingVerificationEmail: null
      }));
      
      // Update storage
      saveUserToStorage(verifiedUser);
      
      // In a real app, you would notify the backend about successful verification
      console.log(`User ${storedUser.email} verified successfully with OTP: ${otp}`);
    } catch (error) {
      if (error instanceof Error) {
        toast.error(error.message);
      } else {
        toast.error('Failed to verify OTP');
      }
      throw error;
    } finally {
      setAuthState(prev => ({ ...prev, isLoading: false }));
    }
  };

  const logout = () => {
    setAuthState({
      user: null,
      isLoading: false,
      needsVerification: false,
      pendingVerificationEmail: null
    });
    removeUserFromStorage();
    toast.info('You have been logged out');
  };

  return {
    login,
    signUp,
    verifyOTP,
    logout
  };
};
